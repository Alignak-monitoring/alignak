[DEFAULT]
_dist=/tmp
_dist_BIN=%(_dist)s
_dist_ETC=%(_dist)s
_dist_VAR=%(_dist)s
_dist_RUN=%(_dist)s
_dist_LOG=%(_dist)s

#-- Generic configuration name
config_name=Alignak global configuration

#-- Username and group to run (defaults to current user)
;user=alignak
;group=alignak
# Disabling security means allowing the daemons to run under root account
# set to 1 to allow daemons running as root
idontcareaboutsecurity=0


#-- Path Configuration
# paths variables values, if not absolute paths, they are relative to workdir.
# using default values for following config variables value:
workdir=%(_dist_RUN)s
logdir=%(_dist_LOG)s
etcdir=%(_dist_ETC)s

; Set to 0 for the daemon to be ignored by the arbiter
;active=0

#-- Set to 0 to make the daemon run foreground (else daemonize mode)
;is_daemon=1

#-- Set to 1 to make the arbiter launch the daemon process
;alignak_launched=1

#-- Set to 1 if you want to replace a running daemon
do_replace=1

#-- SSL configuration --
use_ssl=0
# Paths for certificates files
;server_cert=%(etcdir)s/certs/server.crt
;server_key=%(etcdir)s/certs/server.key
;ca_cert=%(etcdir)s/certs/ca.pem

### Deprecated option - feel free to request for an implementation if needed
;hard_ssl_name_check=0
### Deprecated option - feel free to request for an implementation if needed
;server_dh=%(etcdir)s/certs/server.pem

##-- Realm
## Default value is the realm All
realm=All

#-- Daemon high availability mode
#Â 1 for a spare daemon, 0 for the main daemon
spare=0

; Daemon interface uses two different timeouts:
; - short for light data and long for heavy data exchanges
#short_timeout=3          ; Short short_timeout
#long_timeout=120   ; Long short_timeout

#max_check_attempts=3   ; If ping fails N or more, then the node is set as dead

#-- Debugging daemons
;debug=true
;debug_file=%(LOG)s/%(NAME)s-debug.log

#-- Network configuration
# host is set to 0.0.0.0 to listen on all interfaces, set 127.0.0.1 for a local host
;host=0.0.0.0
# address is the IP address used by the other daemons to contact the daemon
;address=127.0.0.1
# Port the daemon is listening to
;port=10000

#-- pid file
# The daemon will chdir into the workdir directory when launched
# and it will create its pid file in this working dir
# You can override this location with the pid_filename variable
;pid_filename=%(workdir)s/daemon.pid

#-- Local log management --
; Python logger configuration
;logger_configuration=%(etcdir)s/alignak-logger.json

; Include the CherryPy daemon HTTP server log in the daemon log file
;log_cherrypy=1

#-- External modules watchdog --
# If a module got a brok queue() higher than this value, it will be
# killed and restarted. Set to 0 to disable this behavior
max_queue_size=0

# --------------------------------------------
# We also define the global Alignak parameters in this default section. As of it, all the
# daemons will get those parameters made available
# --------------------------------------------
# Alignak instance name
# This information is useful to get/store alignak global configuration in the Alignak backend
# If you share the same backend between several Alignak instances, each instance must have its own
# name. The default is to use the master arbiter name as Alignak instance name.
# Else, you can uncomment this declaration and define your own Alignak instance name in this property
# alignak_name=my_alignak
alignak_name=My Alignak


# --------------------------------------------------------------------
# Notifications configuration
# ---
# Notifications are enabled/disabled
enable_notifications=1

# After a short_timeout, launched plugins are killed
notification_timeout=30
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Retention configuration
# ---
# Number of minutes between 2 retention save, default is 60 minutes
# This is only used if retention is enabled
# todo: move this parameter to the retention aware modules?
retain_state_information=0
retention_update_interval=60
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Active checks configuration
# ---
# Active host/service checks are enabled/disabled
execute_host_checks=1
execute_service_checks=1

# Max plugin output for the plugins launched by the pollers, in bytes
#max_plugins_output_length=8192
max_plugins_output_length=65536

# After a short_timeout, launched plugins are killed
# and the host state is set to a default value (2 for DOWN)
# and the service state is set to a default value (2 for CRITICAL)
#host_check_timeout=30
host_check_timeout=5
#service_check_timeout=60
service_check_timeout=5
#timeout_exit_status=2
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Passive checks configuration
# ---
# Passive host/service checks are enabled/disabled
accept_passive_host_checks=1
accept_passive_service_checks=1

# As default, passive host checks are HARD states
#passive_host_checks_are_soft=0

# Freshness check
# Default is enabled for hosts and services
#check_host_freshness=1
#check_service_freshness=1
# Default is 60 for hosts and services
#host_freshness_check_interval=60
#service_freshness_check_interval=60
# Extra time for freshness check ...
#additional_freshness_latency=15
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Checks scheduler configuration
# ---
# Interval length and re-scheduling configuration
# Do not change those values unless you are really sure to master what you are doing...
# todo: confirm the real interest of those configuration parameters!
#interval_length=60
#auto_reschedule_checks=1
#auto_rescheduling_interval=1
#auto_rescheduling_window=180

# Number of interval to spread the first checks for hosts and services
# Default is 30
#max_service_check_spread=30
max_service_check_spread=5
# Default is 30
#max_host_check_spread=30
max_host_check_spread=5
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Flapping detection configuration
# ---
# Default is enabled
#enable_flap_detection=1

# Flapping threshold for hosts and services
#low_service_flap_threshold=20
#high_service_flap_threshold=30
#low_host_flap_threshold=20
#high_host_flap_threshold=30

# flap_history is the lengh of history states we keep to look for flapping.
# 20 by default, can be useful to increase it. Each flap_history increases cost:
#    flap_history cost = 4Bytes * flap_history * (nb hosts + nb services)
# Example: 4 * 20 * (1000+10000) ~ 900Ko for a quite big conf. So, go for it!
#flap_history=20
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Performance data configuration
# ---
# Performance data management is enabled/disabled
#process_performance_data=1
# Commands for performance data
#host_perfdata_command=
#service_perfdata_command=
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Event handlers configuration
# ---
# Event handlers are enabled/disabled
#enable_event_handlers=1

# By default don't launch even handlers during downtime. Put 0 to
# get back the default nagios behavior
no_event_handlers_during_downtimes=1

# Global host/service event handlers
#global_host_event_handler=
#global_service_event_handler=

# After a short_timeout, launched plugins are killed
#event_handler_timeout=30
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# External commands configuration
# ---
# External commands are enabled/disabled
# check_external_commands=1
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Impacts configuration
# ---
# Enable or not the state change on impact detection (like a host going unreachable
# if a parent is DOWN for example). It's for services and hosts.
# Note: defaults to 0 for Nagios old behavior compatibility
#enable_problem_impacts_states_change=0
enable_problem_impacts_states_change=1


# if 1, disable all notice and warning messages at
# configuration checking when arbiter checks the configuration.
# Default is to log the notices and warnings
#disable_old_nagios_parameters_whining=0
disable_old_nagios_parameters_whining=1


# --------------------------------------------------------------------
# Environment macros configuration
# ---
# Disabling environment macros is good for performance. If you really need it, enable it.
#enable_environment_macros=1
enable_environment_macros=0


# --------------------------------------------------------------------
# Monitoring log configuration
# ---
# Note that alerts and downtimes are always logged
# ---
# --------------------------------------------------------------------
# Notifications
log_notifications=1

# Services retries
log_service_retries=1

# Hosts retries
log_host_retries=1

# Event handlers
log_event_handlers=1

# Flappings
log_flappings=1

# Snapshots
log_snapshots=1

# External commands
log_external_commands=1

# Active checks
log_active_checks=0

# Passive checks
log_passive_checks=0

# Initial states
log_initial_states=0
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Timezone
# --------------------------------------------------------------------
# If you need to set a specific timezone to your deamons, uncomment it
#use_timezone=Europe/Paris
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Arbiter daemons part, when the arbiter starts some daemons by itself
# This may happen if some hosts are defined in a realm that do not
# have all its daemons defined
# --------------------------------------------------------------------
# Daemons arguments
#daemons_arguments=
# Daemons log file
daemons_log_folder=%(logdir)s
# Default is to allocate a port number incrementally starting from the value defined here
daemons_initial_port=7800
# The arbiter is polling the satellites every polling_interval seconds
polling_interval=5
# The arbiter is checking the running daemons every daemons_check_period seconds
daemons_check_period=5
# Graceful stop delay - over this period, the arbiter will force kill the daemons that it launched
daemons_stop_timeout=5
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Alignak internal metrics
# Export all alignak inner performance metrics to a statsd server.
# By default at localhost:8125 (UDP) with the alignak prefix
# Default is not enabled
# --------------------------------------------------------------------
statsd_host = localhost
statsd_port = 8125
statsd_prefix = alignak
statsd_enabled = 0
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Scheduler loop configuration
# Those parameters allow to configure the scheduler actions execution
# period.
# Each parameter is a scheduler recurrent action. On each scheduling
# loop turn, the scheduler checks if the time is come to execute
# the corresponding work.
# Each parameter defines on which loop turn count the action is to be
# executed. Considering a loop turn is 1 second, a parameter value set
# to 10 will make the corresponding action to be executed every 10
# seconds.
# --------------------------------------------------------------------
# BEWARE: changing some of those parameters may have unexpected
# effects! Do not change unless you know what you are doing ;)
# Some tips:
# tick_check_freshness, allow to change the freshness check period
# tick_update_retention, allow to change the retention save period
# --------------------------------------------------------------------
;tick_update_downtimes_and_comments=1
;tick_schedule=1
;tick_check_freshness=10
;tick_consume_results=1
;tick_get_new_actions=1
;tick_scatter_master_notifications=1
;tick_get_new_broks=1
;tick_delete_zombie_checks=1
;tick_delete_zombie_actions=1
;tick_clean_caches=1
;tick_update_retention=3600
tick_update_retention=1800
;tick_check_orphaned=60
tick_update_program_status=10
;tick_check_for_system_time_change=1
;tick_manage_internal_checks=1
;tick_clean_queues=1
; ### Note that if it set to 0, the scheduler will never try to clean its queues for oversizing
tick_clean_queues=10
;tick_update_business_values=60
;tick_reset_topology_change_flags=1
;tick_check_for_expire_acknowledge=1
;tick_send_broks_to_modules=1
;tick_get_objects_from_from_queues=1
;tick_get_latency_average_percentile=10



# We define the name of the 2 main Alignak configuration files.
# There may be 2 configuration files because tools like Centreon generate those...
[alignak-configuration]
# Alignak main configuration file
# -----
# For the unit tests, do not set any configuration file because it is often declared in the tests...
# -----
CFG=../cfg_default.cfg
# Alignak secondary configuration file (none as a default)
;CFG2=


# For each Alignak daemon, this file contains a section with the daemon name. The section
# identifier is the corresponding daemon name prefixed with the keyword daemon and a dot.
# This daemon name is usually built with the daemon type (eg. arbiter, poller,...) and the
# daemon name separated with a dash.
#
#Â The previous rules ensure that Alignak will be able to find all the daemons configuration
# in this file whatever the number of daemons existing in the configuration
#
# To be easily used as a configuration variable of this file, the daemon name is repeated
# inside the section in a NAME variable.
#
# Each section inherits from the [DEFAULT] section and only defines the specific values
# inherent to the declared daemon.

[daemon.arbiter-master]
type=arbiter
name=arbiter-master

#-- Network configuration
# My listening interface
;host=0.0.0.0
port=7770
# My adress for the other daemons
;address=127.0.0.1

## Modules
# Default: None
## Interesting modules:
# - backend_arbiter     = get the monitored objects configuration from the Alignak backend
;modules=backend_arbiter


[daemon.scheduler-master]
type=scheduler
name=scheduler-master

#-- Launched by Alignak or yet launched
;alignak_launched=False

#-- Network configuration
# My listening interface
;host=0.0.0.0
port=7768
# My adress for the other daemons
;address=127.0.0.1

## Modules
# Default: None
# Interesting modules that can be used:
# - backend_scheduler   = store the live state in the Alignak backend (retention)
;modules=backend_scheduler

## Advanced Features:
# Skip initial broks creation. Boot fast, but some broker modules won't
# work with it! (like livestatus for example)
skip_initial_broks=0

# Some schedulers can manage more hosts than others
weight=1

# In NATted environments, you declare each satellite ip[:port] as seen by
# *this* scheduler (if port not set, the port declared by satellite itself
# is used)
;satellitemap=poller-1=1.2.3.4:7771, reactionner-1=1.2.3.5:7769, ...

# Does it accept passive check results for unknown hosts?
accept_passive_unknown_check_results=1

[daemon.poller-master]
type=poller
name=poller-master

#-- Network configuration
;address=127.0.0.1
port=7771

## Modules
# Default: None
## Interesting modules:
# - nrpe-booster        = Replaces the check_nrpe binary to enhance performance for NRPE checks
# - snmp-booster        = Snmp bulk polling module
;modules=nrpe-booster

## Advanced parameters:
manage_sub_realms=1
min_workers=0
max_workers=1
processes_by_worker=256
worker_polling_interval=1

## Passive mode
# In active mode (default behavior), connections are poller -> scheduler to report checks results
# For DMZ monitoring, set to 1 for the connections to be from scheduler -> poller.
#passive=0

## Poller tags
# Poller tags are the tag that the poller will manage. Use None as tag name to manage
# untagged checks (default)
#poller_tags=None

[daemon.reactionner-master]
type=reactionner
name=reactionner-master

#-- Network configuration
;address=127.0.0.1
port=7769

## Modules
# Default: None
# Interesting modules that can be used:
# - nothing currently
;modules

## Advanced parameters:
manage_sub_realms=1
min_workers=0
max_workers=1
processes_by_worker=256
worker_polling_interval=1

## Passive mode
# In active mode (default behavior), connections are poller -> scheduler to report checks results
# For DMZ monitoring, set to 1 for the connections to be from scheduler -> poller.
#passive=0

## Reactionner tags
# Reactionner tags are the tag that the reactionner will manage. Use None as tag name to manage
# untagged checks (default)
#reactionner_tags=None

[daemon.broker-master]
type=broker
name=broker-master

#-- Network configuration
;address=127.0.0.1
port=7772

#-- External modules watchdog --
# The broker daemon has a huge queue size.
max_queue_size=100000

## Advanced parameters:
# Does it receive for schedulers of sub-Realms or only for its realm?
manage_sub_realms=1

# Does it manage arbiters?
manage_arbiters=1

## Modules
# Default: None
# Interesting modules that can be used:
# - backend_broker      = update the live state in the Alignak backend
# - logs                = collect monitoring logs and send them to a Python logger
;modules=backend_broker, logs

[daemon.receiver-master]
type=receiver
name=receiver-master

#-- Network configuration
;address=127.0.0.1
port=7773

## Modules
# Default: None
# Interesting modules that can be used:
# - nsca                = NSCA protocol server for collecting passive checks
# - external-commands   = read a nagios commands file to notify external commands
# - web-services        = expose Web services to get Alignak daemons state and
#                         notify external commands
;modules=nsca,external-commands,web-services

## Advanced parameters:
# Does it receive for schedulers of sub-Realms or only for its realm?
manage_sub_realms=1

# Does it manage arbiters?
manage_arbiters=1
# Does it accept passive check results for unknown hosts?
accept_passive_unknown_check_results=1

# For each Alignak module, this file contains a section with the module configuration.
;[module.example]
;# --------------------------------------------------------------------
;# The module inherits from the global configuration defined in the
;# DEFAULT section
;# only specific module configuration may be set here
;# --------------------------------------------------------------------
;name=Example
;type=type1,type2
;python_name=alignak_module_example
;
;# --------------------------------------------------------------------
;# Module internal metrics
;# Export module metrics to a statsd server.
;# By default at localhost:8125 (UDP) with the alignak prefix
;# Default is not enabled
;# --------------------------------------------------------------------
;;statsd_host = localhost
;;statsd_port = 8125
;;statsd_prefix = alignak
;;statsd_enabled = 0
;# --------------------------------------------------------------------
;
;# Module log level
;;log_level=INFO
;
;# Module specific parameters
;option_1=foo
;option_2=bar
;option_3=foobar
