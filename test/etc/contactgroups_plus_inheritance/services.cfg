define service{
  active_checks_enabled          1
  check_freshness                0
  check_interval                 1
  check_period                   24x7
  event_handler_enabled          1
  failure_prediction_enabled     1
  flap_detection_enabled         1
  is_volatile                    0
  max_check_attempts             2
  name                           generic-service
  notification_interval          1
  notification_options           w,u,c,r,f,s
  notification_period            24x7
  notifications_enabled          1
  obsess_over_service            1
  parallelize_check              1
  passive_checks_enabled         1
  process_perf_data              1
  register                       0
  retain_nonstatus_information   1
  retain_status_information      1
  retry_interval                 1
}

define service{
  active_checks_enabled          1
  check_command                  check_service!ok
  check_interval                 1
  host_name                      test_host_0
  icon_image                     ../../docs/images/tip.gif?host=$HOSTNAME$&srv=$SERVICEDESC$
  icon_image_alt                 icon alt string
  notes                          just a notes string
  retry_interval                 1
  service_description            test_ok_0
  servicegroups                  servicegroup_01,ok
  use                            generic-service
  event_handler                  eventhandler
  notes_url                      /alignak/wiki/doku.php/$HOSTNAME$/$SERVICEDESC$
  action_url                     /alignak/pnp/index.php?host=$HOSTNAME$&srv=$SERVICEDESC$
  _custname			 custvalue
}


# This service should have test_contact_1 as contact
define service{
  use                            svc_templateA, generic-service
  service_description            svc_tmplA
  host_name                      test_host_0
  check_command                  check_service!ok
}

# This service should have test_contact_2 as contact
define service{
  use                            svc_templateB, generic-service
  service_description            svc_tmplB
  host_name                      test_host_0
  check_command                  check_service!ok
}

# This service should have test_contact_1 and test_contact_2 as contact

define service{
  use                            svc_templateA, svc_templateB, generic-service
  service_description            svc_tmplA_tmplB
  host_name                      test_host_0
  check_command                  check_service!ok
}

# Here we declare indirect inheritance AFTER service definition 
define service{
  name                           svc_templateA
  contact_groups                 +test_contact_1
  register                       0
}

define service{
  name                           svc_templateB
  contact_groups                 +test_contact_2
  register                       0
}

