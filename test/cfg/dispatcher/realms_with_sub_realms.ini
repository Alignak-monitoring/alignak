[DEFAULT]
_dist=/usr/local/
_dist_BIN=%(_dist)s/bin
_dist_ETC=%(_dist)s/etc
_dist_VAR=%(_dist)s/var/lib
_dist_RUN=%(_dist)s/var/run
_dist_LOG=%(_dist)s/var/log

#-- Generic daemon name
name=Alignak configuration

#-- Username and group to run (defaults to current user)
user=alignak
group=alignak
# Disabling security means allowing the daemons to run under root account
# idontcareaboutsecurity=0


#-- Path Configuration
# paths variables values, if not absolute paths, they are relative to workdir.
# using default values for following config variables value:
workdir=%(_dist_RUN)s
logdir=%(_dist_LOG)s
etcdir=%(_dist_ETC)s

#-- Set to 0 if you want to make the daemon NOT run
;daemon_enabled=1

#-- Set to 0 to make the daemon run foreground (else daemonize mode)
;is_daemon=1

#-- Set to 1 if you want to replace a running daemon
;do_replace=1

#-- SSL configuration --
use_ssl=0
hard_ssl_name_check=0
# Paths for certificates files
ca_cert=%(etcdir)s/certs/ca.pem
server_cert=%(etcdir)s/certs/server.crt
server_key=%(etcdir)s/certs/server.key
server_dh=%(etcdir)s/certs/server.pem

##-- Realm
## Default value is the realm All
realm=All

#-- Daemon high availability mode
# 1 for a spare daemon, 0 for the main daemon
spare=0
# In a high availability architecture the master and slaves know how long
# they may wait for each other.
#timeout=3   ; Ping timeout
#data_timeout=120 ; Data send timeout
#max_check_attempts=3   ; If ping fails N or more, then the node is dead
#check_interval=60  ; Ping node every N seconds

#-- Timezone
# If you need to set a specific timezone to your deamons, uncomment it
#use_timezone=Europe/Paris

#-- Debugging daemons
;debug=true
;debug_file=%(LOG)s/%(NAME)s-debug.log

#-- Network configuration
# host is set to 0.0.0.0 to listen on all interfaces, set 127.0.0.1 for a local host
# host=0.0.0.0
# address is the IP address used by the other daemons to contact the daemon
# address=0.0.0.0
# Port the daemon is listening to
port=10000

#-- pid file
# The daemon will chdir into the workdir directory when launched
# and it will create its pid file in this working dir
# You can override this location with the pidfile variable
pidfile=%(workdir)s/%(NAME)s.pid

#-- Local log management --
# Enabled by default to ease troubleshooting
#use_local_log=1
# The daemon will chdir into the workdir directory when launched
# and it will create its log file in this working dir
# You can override this location with the local_log variable
local_log=%(logdir)s/%(NAME)s.log
# Log with a formatted human date
#human_timestamp_log=1
#human_date_format=%Y-%m-%d %H:%M:%S %Z
# Rotate log file every day, keeping 7 files
#log_rotation_when=midnight
#log_rotation_interval=1
#log_rotation_count=7
# accepted log level values= DEBUG,INFO,WARNING,ERROR,CRITICAL
#log_level=INFO

#-- External modules watchdog --
# If a module got a brok queue() higher than this value, it will be
# killed and restart. Put to 0 to disable it
max_queue_size=0

# We define the name of the 2 main Alignak configuration files.
# There may be 2 configuration files because tools like Centreon generate those...
[alignak-configuration]
# Alignak main configuration file
# -----
# For the unit tests, do not set any configuration file because it is declare in the tests...
# -----
;CFG=%(etcdir)s/alignak.cfg
# Alignak secondary configuration file (none as a default)
;CFG2=


# For each Alignak daemon, this file contains a section with the daemon name. The section
# identifier is the corresponding daemon name prefixed with the keyword daemon and a dot.
# This daemon name is usually built with the daemon type (eg. arbiter, poller,...) and the
# daemon name separated with a dash.
#
# The previous rules ensure that Alignak will be able to find all the daemons configuration
# in this file whatever the number of daemons existing in the configuration
#
# To be easily used as a configuration variable of this file, the daemon name is repeated
# inside the section in a NAME variable.
#
# Each section inherits from the [DEFAULT] section and only defines the specific values
# inherent to the declared daemon.

[daemon.arbiter-master]
### ARBITER PART ###
type=arbiter
name=arbiter-master

#-- Network configuration
;address=127.0.0.1
port=7770

## Modules
# Default: None
## Interesting modules:
# - backend_arbiter     = get the monitored objects configuration from the Alignak backend
;modules=backend_arbiter


[daemon.scheduler-master]
### SCHEDULER PART ###
type=scheduler
name=scheduler-master

#-- Network configuration
;address=127.0.0.1
port=7768

## Modules
# Default: None
# Interesting modules that can be used:
# - backend_scheduler   = store the live state in the Alignak backend (retention)
;modules=backend_scheduler

## Advanced Features:
# Skip initial broks creation. Boot fast, but some broker modules won't
# work with it! (like livestatus for example)
skip_initial_broks=0

# Some schedulers can manage more hosts than others
weight=1

# In NATted environments, you declare each satellite ip[:port] as seen by
# *this* scheduler (if port not set, the port declared by satellite itself
# is used)
;satellitemap=poller-1=1.2.3.4:7771, reactionner-1=1.2.3.5:7769, ...

# Does it accept passive check results for unknown hosts?
accept_passive_unknown_check_results=1

[daemon.poller-master]
### POLLER PART ###
type=poller
name=poller-master

#-- Network configuration
;address=127.0.0.1
port=7771

## Modules
# Default: None
## Interesting modules:
# - nrpe-booster        = Replaces the check_nrpe binary to enhance performance for NRPE checks
# - snmp-booster        = Snmp bulk polling module
;modules=nrpe-booster

## Advanced parameters:
manage_sub_realms=1        ; Does it take jobs from schedulers of sub-Realms?
min_workers=0              ; Starts with N processes (0 = 1 per CPU)
max_workers=0              ; No more than N processes (0 = 1 per CPU)
processes_by_worker=256    ; Each worker manages N checks
polling_interval=1         ; Get jobs from schedulers each N seconds

## Passive mode
# In active mode (default behavior), connections are poller -> scheduler to report checks results
# For DMZ monitoring, set to 1 for the connections to be from scheduler -> poller.
#passive=0

## Poller tags
# Poller tags are the tag that the poller will manage. Use None as tag name to manage
# untagged checks (default)
#poller_tags=None

[daemon.reactionner-master]
### REACTIONNER PART ###
type=reactionner
name=reactionner-master

#-- Network configuration
;address=127.0.0.1
port=7769

## Modules
# Default: None
# Interesting modules that can be used:
# - nothing currently
;modules

## Advanced parameters:
manage_sub_realms=1        ; Does it take jobs from schedulers of sub-Realms?
min_workers=0              ; Starts with N processes (0 = 1 per CPU)
max_workers=0              ; No more than N processes (0 = 1 per CPU)
processes_by_worker=256    ; Each worker manages N checks
polling_interval=1         ; Get jobs from schedulers each N seconds

## Passive mode
# In active mode (default behavior), connections are poller -> scheduler to report checks results
# For DMZ monitoring, set to 1 for the connections to be from scheduler -> poller.
#passive=0

## Reactionner tags
# Reactionner tags are the tag that the reactionner will manage. Use None as tag name to manage
# untagged checks (default)
#reactionner_tags=None

[daemon.broker-master]
### BROKER PART ###
type=broker
name=broker-master

#-- Network configuration
;address=127.0.0.1
port=7772

#-- External modules watchdog --
# The broker daemon has a huge queue size.
max_queue_size=100000

## Modules
# Default: None
# Interesting modules that can be used:
# - backend_broker      = update the live state in the Alignak backend
# - logs                = collect monitoring logs and send them to a Python logger
;modules=backend_broker, logs

[daemon.receiver-master]
### RECEIVER PART ###
type=receiver
name=receiver-master

#-- Network configuration
;address=127.0.0.1
port=7773

## Modules
# Default: None
# Interesting modules that can be used:
# - nsca                = NSCA protocol server for collecting passive checks
# - external-commands   = read a nagios commands file to notify external commands
# - web-services        = expose Web services to get Alignak daemons state and
#                         notify external commands
;modules=nsca,external-commands,web-services

## Advanced parameters:
# Does it receive for schedulers of sub-Realms or only for its realm?
manage_sub_realms=1

# Does it manage arbiters?
manage_arbiters=1
# Does it accept passive check results for unknown hosts?
accept_passive_unknown_check_results=1

[daemon.realm2-scheduler-master]
type=scheduler
name=realm2-scheduler-master
port=8768
realm=realm2

;[daemon.realm2-scheduler-master-bis]
;type=scheduler
;name=realm2-scheduler-master-bis
;port=9768
;realm=realm2

[daemon.realm2-poller-master]
type=poller
name=realm2-poller-master
port=8771
realm=realm2

[daemon.realm2-broker-master]
type=broker
name=realm2-broker-master
port=8772
realm=realm2

[daemon.realm3-scheduler-master]
type=scheduler
name=realm3-scheduler-master
port=18768
realm=realm3

[daemon.realm3-reactionner-master]
type=reactionner
name=realm3-reactionner-master
port=18769
realm=realm3

[daemon.realm3-poller-master]
type=poller
name=realm3-poller-master
port=18771
realm=realm3

[daemon.realm3-broker-master]
type=broker
name=realm3-broker-master
port=18772
realm=realm3

[daemon.realm3-receiver-master]
type=receiver
name=realm3-receiver-master
port=18772
realm=realm3
