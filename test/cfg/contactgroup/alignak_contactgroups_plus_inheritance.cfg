cfg_dir=../default

define contactgroup{
    contactgroup_name       test_contact_1
    alias                   test_contacts_alias_1
    members                 test_contact_1
}

define contactgroup{
    contactgroup_name       test_contact_2
    alias                   test_contacts_alias_2
    members                 test_contact_2
}


define contact{
    contact_name                    test_contact_1
    alias                           test_contact_alias_1
    service_notification_period     24x7
    host_notification_period        24x7
    service_notification_options    w,u,c,r,f
    host_notification_options       d,u,r,f,s
    service_notification_commands   notify-service
    host_notification_commands      notify-host
    email                           nobody@localhost
    can_submit_commands             1
}


define contact{
    contact_name                    test_contact_2
    alias                           test_contact_alias_2
    service_notification_period     24x7
    host_notification_period        24x7
    service_notification_options    w,u,c,r,f
    host_notification_options       d,u,r,f,s
    service_notification_commands   notify-service
    host_notification_commands      notify-host
    email                           nobody@localhost
    can_submit_commands             1
}


define host{
  check_interval                 1
  check_period                   24x7
  contact_groups                 +test_contact_1
  event_handler_enabled          1
  flap_detection_enabled         1
  max_check_attempts             3
  name                           generic-host1
  notification_interval          1
  notification_options           d,u,r,f,s
  notification_period            24x7
  notifications_enabled          1
  process_perf_data              1
  register                       0
  retain_nonstatus_information   1
  retain_status_information      1
  retry_interval                 1
  notes_url                      /alignak/wiki/doku.php/$HOSTNAME$
  action_url                     /alignak/pnp/index.php?host=$HOSTNAME$
}

define host{
  check_interval                 1
  check_period                   24x7
  contact_groups                 test_contact_1
  event_handler_enabled          1
  flap_detection_enabled         1
  max_check_attempts             3
  name                           generic-host2
  notification_interval          1
  notification_options           d,u,r,f,s
  notification_period            24x7
  notifications_enabled          1
  process_perf_data              1
  register                       0
  retain_nonstatus_information   1
  retain_status_information      1
  retry_interval                 1
  notes_url                      /alignak/wiki/doku.php/$HOSTNAME$
  action_url                     /alignak/pnp/index.php?host=$HOSTNAME$
}

# Direct inheritance with and without +
define host{
  address                        127.0.0.1
  alias                          up_0
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
  event_handler                  eventhandler
  check_period                   24x7
  host_name                      test_host_0
  hostgroups                     hostgroup_01
  use                            generic-host1
  criticity                      5
  contact_groups                 +test_contact_2
}

define host{
  address                        127.0.0.1
  alias                          up_6
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
  event_handler                  eventhandler
  check_period                   24x7
  host_name                      test_host_6
  hostgroups                     hostgroup_01
  use                            generic-host2
  criticity                      5
  contact_groups                 +test_contact_2
}

# Host with indirect inheritance



# This host should have test_contact_1 as contact
define host{
  use                            templateA
  host_name                      test_host_2
  alias                          up_2
  address                        127.0.0.1
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
}

# This host should have test_contact_1  and test_contact_2 as contact
define host{
  use                            templateB
  host_name                      test_host_3
  alias                          up_3
  address                        127.0.0.1
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
}



# This host should have test_contact_1  as contact
define host{
  use                            templateA, generic-host1
  host_name                      test_host_4
  alias                          up_4
  address                        127.0.0.1
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
}

# This host should have test_contact_1  and test_contact_2 as contact
define host{
  use                            templateA, templateB, generic-host1
  host_name                      test_host_5
  alias                          up_5
  address                        127.0.0.1
  check_command                  check-host-alive-parent!up!$HOSTSTATE:test_router_0$
}



# Here we declare indirect inheritance AFTER host definition
define host{
  use                            generic-host1
  name                           templateA
  register 			 0
}

define host{
  use                            generic-host1
  name                           templateB
  contact_groups                 +test_contact_2
  register                       0
}



# This service should have test_contact_1 as contact
define service{
  use                            svc_templateA, generic-service
  service_description            svc_tmplA
  host_name                      test_host_0
  check_command                  check_service!ok
}

# This service should have test_contact_2 as contact
define service{
  use                            svc_templateB, generic-service
  service_description            svc_tmplB
  host_name                      test_host_0
  check_command                  check_service!ok
}

# This service should have test_contact_1 and test_contact_2 as contact

define service{
  use                            svc_templateA, svc_templateB, generic-service
  service_description            svc_tmplA_tmplB
  host_name                      test_host_0
  check_command                  check_service!ok
}

# Here we declare indirect inheritance AFTER service definition
define service{
  name                           svc_templateA
  contact_groups                 +test_contact_1
  register                       0
}

define service{
  name                           svc_templateB
  contact_groups                 +test_contact_2
  register                       0
}


