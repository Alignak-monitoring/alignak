cfg_dir=../default
define scheduler{
       scheduler_name   scheduler-1   ; just the name
       address  localhost             ; ip or dns address of the daemon
       port     7768                  ; tcp port of the daemon
       spare    0                     ; (0 = not a spare, 1 = is spare)
       weight           1             ; (some schedulers can manage more hosts than others)
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       check_interval           60    ; ping it every minute
       realm    Realm1                   ; optional (realm are multi-datacenters features)
}

define poller{
       poller_name      poller-1
       address          localhost
       port             7771
       manage_sub_realms 0      ; optional and advanced: does it take jobs from schedulers of sub realms?
       min_workers       0      ; optional: starts with N worker processes. 0 means: "number of cpus"
       max_workers       0      ; optional: no more than N worker processes. 0 means: "number of cpus"
       processes_by_worker      256        ; optional: each worker manages 256 checks
       polling_interval         1       ; optional: get jobs from schedulers each 1 second
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       check_interval           60    ; ping it every minute
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       realm            Realm1
}

define broker{
       broker_name      broker-1
       address          localhost
       port             7772
       spare            0
       modules           Livestatus
       manage_sub_realms 1   ; optional, like for poller
       manage_arbiters   1   ; optional: take data from Arbiter. There should be
       check_interval           60    ; ping it every minute
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       realm    Realm1
}

# Reactionner launches notifications
define reactionner{
       reactionner_name         reactionner-1
       address                  localhost
       port                     7769
       spare                    0
       manage_sub_realms 0      ;optionnal: like for poller
       min_workers       1      ;optionnal: like for poller
       max_workers       15     ;optionnal: like for poller
       polling_interval         1       ;optionnal: like for poller
       timeout          3             ; 'ping' timeout
       data_timeout     120           ; 'data send' timeout
       check_interval           60    ; ping it every minute
       max_check_attempts       3     ;  if at least max_check_attempts ping failed, the node is DEAD
       realm                    Realm1
}

define realm{
       realm_name	NoDefault
}

define realm{
       realm_name	Realm1
}

define realm{
       realm_name	Realm2
}


define host{
  address                        127.0.0.1
  alias                          up_0
  host_name                      test_host_realm1
  hostgroups                     hostgroup_01,up
  use                            generic-host
  realm				 Realm1
}

define host{
  address                        127.0.0.1
  alias                          up_0
  host_name                      test_host_realm2
  hostgroups                     hostgroup_01,up
  use                            generic-host
  realm				 Realm2
}

define service{
  check_command                  check_service!ok
  host_name                      test_host_realm1
  service_description            test_ok_realm1_0
  use                            generic-service
}

define service{
  check_command                  check_service!ok
  host_name                      test_host_realm2
  service_description            test_ok_realm2_0
  use                            generic-service
}

define service{
  check_command                  bp_rule!(test_host_realm1,test_ok_realm1_0 & test_host_realm2,test_ok_realm2_0)
  host_name                      test_host_realm1
  service_description            Test bad services BP rules
  use                            generic-service
}

define service{
  check_command                  bp_rule!(test_host_realm1 & test_host_realm2)
  host_name                      test_host_realm1
  service_description            Test bad host BP rules
  use                            generic-service
}

define service{
  check_command                  bp_rule!((test_host_realm1,test_ok_realm1_0 & test_host_realm2,test_ok_realm2_0) |Â (test_host_realm1 & test_host_realm2))
  host_name                      test_host_realm1
  service_description            Test bad services BP rules complex
  use                            generic-service
}

