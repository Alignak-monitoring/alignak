#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015-2015: Alignak team, see AUTHORS.txt file for contributors
#
# This file is part of Alignak.
#
# Alignak is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Alignak is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Alignak.  If not, see <http://www.gnu.org/licenses/>.
#
#
# This file incorporates work covered by the following copyright and
# permission notice:
#
#  Copyright (C) 2009-2014:
#     Gr√©gory Starck, g.starck@gmail.com
#     Hartmut Goebel, h.goebel@goebel-consult.de
#     Jean Gabes, naparuba@gmail.com
#     Sebastien Coavoux, s.coavoux@free.fr

#  This file is part of Shinken.
#
#  Shinken is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Shinken is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with Shinken.  If not, see <http://www.gnu.org/licenses/>.

"""
This file is used to test realms usage
"""
import time
import unittest2 as unittest
from alignak_test import AlignakTest, time_hacker
from alignak.modulesmanager import ModulesManager
from alignak.objects.module import Module


class TestModules(AlignakTest):
    """
    This class contains the tests for the modules
    """

    def test_module_autogeneration(self):
        """
        Test arbiter, broker, ... auto-generated modules
        :return:
        """
        # TODO: auto-generated modules, issue #388
        self.print_header()
        self.setup_with_file('cfg/modules/alignak_modules_autogenerated.cfg')
        self.assertTrue(self.conf_is_correct)

        # Alignak arbiter creates this auto-generated module if...
        modules = [m.module_alias for m in self.arbiter.myself.modules]
        self.assertListEqual(modules, [
            # command_file
            "NamedPipe-Autogenerated",
        ])
        # ...is in the configuration

        # Alignak arbiter creates auto-generated Broker modules if some parameters
        # are present in the configuration
        modules = [m.module_alias for m in self.brokers[0].modules]
        # Alignak arbiter creates this auto-generated module if...
        self.assertListEqual(modules, [
            # status_file
            "Status-Dat-Autogenerated",
            # log_file
            "Simple-log-Autogenerated",
            # use_syslog
            "Syslog-Autogenerated",
            # service_perfdata_file
            "Service-Perfdata-Autogenerated",
            # host_perfdata_file
            "Host-Perfdata-Autogenerated",
        ])
        # ...is in the configuration

        # Alignak arbiter creates auto-generated Scheduler modules if some parameters
        # are present in the configuration
        modules = [m.module_alias for m in self.schedulers[0].modules]
        # Alignak arbiter creates this auto-generated module if...
        self.assertListEqual(modules, [
            # state_retention_file
            "Nagios-Retention-File-Autogenerated",
        ])
        # ...is in the configuration

    @unittest.skip("Disabled - ModuleManager does not handle Module object #340")
    def test_module_on_module(self):
        """

        :return:
        """
        self.print_header()
        self.setup_with_file('cfg/modules/alignak_module_on_module.cfg')
        self.assertTrue(self.conf_is_correct)

        print(self.schedulers[0])
        print(self.schedulers[0].modules_manager)
        print(self.schedulers[0].modules_manager.instances)
        # No more possible !!!
        mod1 = self.schedulers[0].modules.find_by_name("Simple-log2")
        self.assertIsNot(mod1, None)
        print "Got module", mod1.get_name()
        mod_sub = self.schedulers[0].conf.modules.find_by_name("ToNdodb_Mysql")
        self.assertIsNot(mod_sub, None)
        print "Got sub module", mod_sub.get_name()
        self.assertIn(mod_sub, mod1.modules)
        self.assertEqual([], mod_sub.modules)

    def test_modules_missing_imported_from(self):
        """
        we are loading a module (dummy_arbiter) that is giving objects WITHOUT
        setting imported_from. One host got a warning, and this can crash without the
        imported_from setting in the arbiterdaemon part.
        :return:
        """
        self.print_header()
        self.setup_with_file('cfg/modules/alignak_missing_imported_from_module_property.cfg')
        self.assertTrue(self.conf_is_correct)

        self.assertTrue(self.schedulers[0].conf.is_correct)

    def test_modules_conflicting(self):

        # prepare 2 modconfs:
        modconfA = Module({'module_alias': 'whatever',
                           'python_name': 'test_modules_conflicting.modA'})
        modconfB = Module({'module_alias': '42',
                           'python_name': 'test_modules_conflicting.modB'})

        self.modulemanager = ModulesManager('broker', None)
        count_modules = self.modulemanager.load_and_init([modconfA, modconfB])
        self.assertEqual(count_modules, 2)

        # prepare 2 modconfs:
        modconfA = Module({'module_alias': 'whatever',
                           'python_name': 'test_modules_conflicting.modA'})
        modconfB = Module({'module_alias': '42',
                           'python_name': 'test_modules_conflicting.modB'})

        self.modulemanager = ModulesManager('broker', None)
        count_modules = self.modulemanager.load_and_init([modconfA, modconfB])
        self.assertEqual(len(count_modules), 2)

        modA = None
        modB = None
        for _, mod in self.modulemanager.modules_assoc:
            if mod.__package__ == 'test_modules_conflicting.modA':
                modA = mod
            elif mod.__package__ == 'test_modules_conflicting.modB':
            if mod.__package__ == 'test_module_as_package_dir.modA':
                modA = mod
            elif mod.__package__ == 'test_module_as_package_dir.modB':
            if mod.__package__ == 'test_modules_conflicting.modA':
                modA = mod
            elif mod.__package__ == 'test_modules_conflicting.modB':
                modB = mod

            if mod.properties['type'].startswith("mod"):
                self.assertEqual(mod.expected_helpers_X, mod.helpers.X)
        self.assertIsNotNone(modA)
        self.assertIsNotNone(modB)
        self.assertNotEqual(modA.helpers.X, modB.helpers.X)

    @unittest.skip("Temporarily disabled")
    def test_modulemanager(self):
        """
        Test arbiter auto-generated modules
        :return:
        """
        self.print_header()
        self.setup_with_file('cfg/modules/alignak_modules_autogenerated.cfg')
        self.assertTrue(self.conf_is_correct)

        time_hacker.set_real_time()

        mod = Module({'module_alias': 'mod-example', 'python_name': 'alignak_module_example'})
        self.modulemanager = ModulesManager('broker', None)
        # Load and init the modules
        count_modules = self.modulemanager.load_and_init([mod])
        self.assertEqual(len(count_modules), 2)
        # And start external ones, if some...
        self.modulemanager.start_external_instances()

        print("I correctly loaded the modules: %s " % (
            [inst.get_name() for inst in self.modulemanager.instances]
        ))

        print("*** First kill ****")
        # Now I will try to kill the livestatus module
        ls = self.modulemanager.instances[0]
        " :type: alignak.basemodule.BaseModule "
        ls.kill()
        time.sleep(0.1)
        print "Check alive?"
        print "Is alive?", ls.process.is_alive()
        # Should be dead
        self.assertFalse(ls.process.is_alive())
        self.modulemanager.check_alive_instances()
        self.modulemanager.try_to_restart_deads()

        # In fact it's too early, so it won't do it

        # Here the inst should still be dead
        print "Is alive?", ls.process.is_alive()
        self.assertFalse(ls.process.is_alive())

        # So we lie
        ls.last_init_try = -5
        self.modulemanager.check_alive_instances()
        self.modulemanager.try_to_restart_deads()

        # In fact it's too early, so it won't do it

        # Here the inst should be alive again
        print "Is alive?", ls.process.is_alive()
        self.assertTrue(ls.process.is_alive())

        # should be nothing more in to_restart of
        # the module manager
        self.assertEqual([], self.modulemanager.to_restart)

        # Now we look for time restart so we kill it again
        ls.kill()
        time.sleep(0.2)
        self.assertFalse(ls.process.is_alive())

        # Should be too early
        self.modulemanager.check_alive_instances()
        self.modulemanager.try_to_restart_deads()
        print "Is alive or not", ls.process.is_alive()
        self.assertFalse(ls.process.is_alive())
        # We lie for the test again
        ls.last_init_try = -5
        self.modulemanager.check_alive_instances()
        self.modulemanager.try_to_restart_deads()

        # Here the inst should be alive again
        print "Is alive?", ls.process.is_alive()
        self.assertTrue(ls.process.is_alive())

        # And we clear all now
        print "Ask to die"
        self.modulemanager.stop_all()
        print "Died"
