input {
   # Monitoring events log
   file {
      type => "alignak_monitoring_log"
      path => [
        "/usr/local/var/log/alignak/monitoring-log/*"
      ]
      tags => [ "alignak-monitoring" ]
      start_position => "beginning"
      sincedb_path => "/var/db/logstash/since_alignak_monitoring"
      codec => multiline {
         patterns_dir => ["/usr/local/etc/logstash/patterns"]
         pattern => "^%{ALIGNAK_TIME}"
         negate => true
         what => "previous"
      }
   }

   # Daemons log
   file {
      type => "alignak_daemon"
      path => [
        "/usr/local/var/log/alignak/*"
      ]
      tags => [ "alignak-daemon" ]
      start_position => "beginning"
      sincedb_path => "/var/db/logstash/since_alignak_daemon"
      codec => multiline {
         patterns_dir => ["/usr/local/etc/logstash/patterns"]
         pattern => "^%{ALIGNAK_DAEMON_TIME}"
         negate => true
         what => "previous"
      }
   }
}

filter {
   # Monitoring events log
   if [type] == "alignak_monitoring_log" {
      grok {
         patterns_dir => ["/usr/local/etc/logstash/patterns"]
         match => { "message" => "%{ALIGNAK_LOG}" }
      }
      csv {
         source => "[alignak][check_result]"
         separator => ";"
         columns => [ "[alignak][check_output]", "[alignak][check_long_output]", "[alignak][perf_data]" ]
         remove_field => [ "[alignak][check_result]" ]
      }
      if ([alignak][ext_cmd] == "PROCESS_HOST_CHECK_RESULT") {
        csv {
          source => "[alignak][ext_cmd_parameters]"
          separator => ";"
          columns => [ "dummy", "[alignak][host_name]", "[alignak][state_id]", "[alignak][check_result]" ]
        }
      }
      if ([alignak][ext_cmd] == "PROCESS_SERVICE_CHECK_RESULT") {
        csv {
          source => "[alignak][ext_cmd_parameters]"
          separator => ";"
          columns => [ "dummy", "[alignak][host_name]", "[alignak][service]", "[alignak][state_id]", "[alignak][check_result]" ]
        }
      }
      date {
        match => [ "[alignak][timestamp]", "yyyy-MM-dd HH:mm:ss" ]
        target => "[alignak][timestamp]"
      }
      if [alignak][ext_cmd_timestamp] {
        date {
          match => [ "[alignak][ext_cmd_timestamp]", "UNIX" ]
          target => "[alignak][ext_cmd_timestamp]"
        }
        if [alignak][ext_cmd_timestamp] <= [alignak][timestamp] {
          mutate {
            add_tag => [ "late" ]
          }
          ruby {
            code => "event.set('@timestamp', event.get('[alignak][ext_cmd_timestamp]'));"
          }
          #mutate {
          #  update => { "@timestamp" => "[alignak][ext_cmd_timestamp]" }
          #}
        }
      } else {
        date {
          match => [ "[alignak][timestamp]", "yyyy-MM-dd HH:mm:ss" ]
          target => "@timestamp"
        }
      }
   }

   # Daemons log
   if [type] == "alignak_daemon" {
      grok {
         patterns_dir => ["/usr/local/etc/logstash/patterns"]
         match => { "message" => "%{ALIGNAK_DAEMON_LOG}" }
      }
      date {
         match => [ "[alignak][timestamp]", "yyyy-MM-dd HH:mm:ss" ]
         target => "@timestamp"
      }
      grok {
         match => { "[alignak][source]" => "%{DATA:[alignak][daemon]}\." }
      }
   }
}

output {
   # Emit events to stdout for easy debugging of what is going through logstash.
#   stdout { debug => "true" }
#   stdout { codec => rubydebug }

  if [type] == "alignak-daemon" {
    # This will use elasticsearch to store your logs.
    elasticsearch {
      hosts => [ "es1:9200" ]
      index => "logstash-alignak-daemon-%{+YYYY.MM.dd}"
    }
  }

  if [type] == "alignak-monitoring" {
    elasticsearch {
      hosts => ["es1:9200"]
      index => "logstash-alignak-monitoring-%{+YYYY.MM.dd}"
    }
  }
}
