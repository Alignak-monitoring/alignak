[DEFAULT]
_dist=/tmp
_dist_BIN=%(_dist)s
_dist_ETC=%(_dist)s
_dist_VAR=%(_dist)s
_dist_RUN=%(_dist)s
_dist_LOG=%(_dist)s

#-- Generic daemon name
config_name=Alignak configuration

#-- Username and group to run (defaults to current user)
;user=alignak
;group=alignak
# Disabling security means allowing the daemons to run under root account
# idontcareaboutsecurity=0


#-- Path Configuration
# paths variables values, if not absolute paths, they are relative to workdir.
# using default values for following config variables value:
workdir=%(_dist_RUN)s
logdir=%(_dist_LOG)s
etcdir=%(_dist_ETC)s

#-- Set to 0 if you want to make the daemon NOT run
;daemon_enabled=1

#-- Set to 1 to make the arbiter launch the daemon process
alignak_launched=1

# The arbiter is checking the running daemons every daemons_check_period seconds
daemons_check_period=30

#-- Set to 0 to make the daemon run foreground (else daemonize mode)
;is_daemon=1

#-- Set to 1 if you want to replace a running daemon
do_replace=1

#-- SSL configuration --
use_ssl=0
hard_ssl_name_check=0
# Paths for certificates files
ca_cert=%(etcdir)s/certs/ca.pem
server_cert=%(etcdir)s/certs/server.crt
server_key=%(etcdir)s/certs/server.key
server_dh=%(etcdir)s/certs/server.pem

##-- Realm
## Default value is the realm All
realm=All

#-- Daemon high availability mode
#Â 1 for a spare daemon, 0 for the main daemon
spare=0
# In a high availability architecture the master and slaves know how long
# they may wait for each other.
#short_timeout=3   ; Ping short_timeout
#long_timeout=120 ; Data send short_timeout
#max_check_attempts=3   ; If ping fails N or more, then the node is dead
#check_interval=60  ; Ping node every N seconds

#-- Timezone
# If you need to set a specific timezone to your deamons, uncomment it
#use_timezone=Europe/Paris

#-- Debugging daemons
;debug=true
;debug_file=%(LOG)s/%(NAME)s-debug.log

#-- Network configuration
# host is set to 0.0.0.0 to listen on all interfaces, set 127.0.0.1 for a local host
# host=0.0.0.0
# address is the IP address used by the other daemons to contact the daemon
# address=0.0.0.0
# Port the daemon is listening to
port=10000

#-- pid file
# The daemon will chdir into the workdir directory when launched
# and it will create its pid file in this working dir
# You can override this location with the pidfile variable
;pidfile=%(workdir)s/daemon.pid

#-- Local log management --
;logger_configuration=./alignak-logger.json

# Enabled by default to ease troubleshooting
#use_local_log=1
# The daemon will chdir into the workdir directory when launched
# and it will create its log file in this working dir
# You can override this location with the local_log variable
;log_filename=%(logdir)s/daemon.log
# Log with a formatted human date
#human_timestamp_log=1
#human_date_format=%Y-%m-%d %H:%M:%S %Z
# Rotate log file every day, keeping 7 files
#log_rotation_when=midnight
#log_rotation_interval=1
#log_rotation_count=7
# accepted log level values= DEBUG,INFO,WARNING,ERROR,CRITICAL
#log_level=INFO
;log_level=DEBUG

#-- External modules watchdog --
# If a module got a brok queue() higher than this value, it will be
# killed and restart. Put to 0 to disable it
max_queue_size=0

# --------------------------------------------
# We also define the global Alignak parameters in this default section. As of it, all the
# daemons will get those parameters made available
# --------------------------------------------
# Alignak instance name
# This information is useful to get/store alignak global configuration in the Alignak backend
# If you share the same backend between several Alignak instances, each instance must have its own
# name. The default is to use the master arbiter name as Alignak instance name.
# Else, you can uncomment this declaration and define your own Alignak instance name in this property
# alignak_name=my_alignak
alignak_name=My Alignak


# --------------------------------------------------------------------
# Notifications configuration
# ---
# Notifications are enabled/disabled
enable_notifications=1

# After a short_timeout, launched plugins are killed
notification_timeout=30
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Retention configuration
# ---
# Number of minutes between 2 retention save, default is 60 minutes
# This is only used if retention is enabled
# todo: move this parameter to the retention aware modules?
retention_update_interval=0
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Active checks configuration
# ---
# Active host/service checks are enabled/disabled
execute_host_checks=1
execute_service_checks=1

# Max plugin output for the plugins launched by the pollers, in bytes
#max_plugins_output_length=8192
max_plugins_output_length=65536

# After a short_timeout, launched plugins are killed
# and the host state is set to a default value (2 for DOWN)
# and the service state is set to a default value (2 for CRITICAL)
#host_check_timeout=30
host_check_timeout=5
#service_check_timeout=60
service_check_timeout=5
#timeout_exit_status=2
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Passive checks configuration
# ---
# Passive host/service checks are enabled/disabled
accept_passive_host_checks=1
accept_passive_service_checks=1

# As default, passive host checks are HARD states
#passive_host_checks_are_soft=0

# Freshness check
# Default is enabled for hosts and services
#check_host_freshness=1
#check_service_freshness=1
# Default is 60 for hosts and services
#host_freshness_check_interval=60
host_freshness_check_interval=1200
#service_freshness_check_interval=60
service_freshness_check_interval=1800
# Extra time for freshness check ...
#additional_freshness_latency=15
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Checks scheduler configuration
# ---
# Interval length and re-scheduling configuration
# Do not change those values unless you are really sure to master what you are doing...
# todo: confirm the real interest of those configuration parameters!
#interval_length=60
#auto_reschedule_checks=1
#auto_rescheduling_interval=1
#auto_rescheduling_window=180

# Number of interval to spread the first checks for hosts and services
# Default is 30
#max_service_check_spread=30
max_service_check_spread=5
# Default is 30
#max_host_check_spread=30
max_host_check_spread=5
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Flapping detection configuration
# ---
# Default is enabled
#enable_flap_detection=1

# Flapping threshold for hosts and services
#low_service_flap_threshold=20
#high_service_flap_threshold=30
#low_host_flap_threshold=20
#high_host_flap_threshold=30

# flap_history is the lengh of history states we keep to look for flapping.
# 20 by default, can be useful to increase it. Each flap_history increases cost:
#    flap_history cost = 4Bytes * flap_history * (nb hosts + nb services)
# Example: 4 * 20 * (1000+10000) ~ 900Ko for a quite big conf. So, go for it!
#flap_history=20
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Performance data configuration
# ---
# Performance data management is enabled/disabled
#process_performance_data=1
# Commands for performance data
#host_perfdata_command=
#service_perfdata_command=
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Event handlers configuration
# ---
# Event handlers are enabled/disabled
#enable_event_handlers=1

# By default don't launch even handlers during downtime. Put 0 to
# get back the default nagios behavior
no_event_handlers_during_downtimes=1

# Global host/service event handlers
#global_host_event_handler=
#global_service_event_handler=

# After a short_timeout, launched plugins are killed
#event_handler_timeout=30
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# External commands configuration
# ---
# External commands are enabled/disabled
# check_external_commands=1
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Impacts configuration
# ---
# Enable or not the state change on impact detection (like a host going unreachable
# if a parent is DOWN for example). It's for services and hosts.
# Note: defaults to 0 for Nagios old behavior compatibility
#enable_problem_impacts_states_change=0
enable_problem_impacts_states_change=1


# if 1, disable all notice and warning messages at
# configuration checking when arbiter checks the configuration.
# Default is to log the notices and warnings
#disable_old_nagios_parameters_whining=0
disable_old_nagios_parameters_whining=1


# --------------------------------------------------------------------
# Environment macros configuration
# ---
# Disabling environment macros is good for performance. If you really need it, enable it.
#enable_environment_macros=1
enable_environment_macros=0


# --------------------------------------------------------------------
# Monitoring log configuration
# ---
# Note that alerts and downtimes are always logged
# ---
# --------------------------------------------------------------------
# Notifications
log_notifications=1

# Services retries
log_service_retries=1

# Hosts retries
log_host_retries=1

# Event handlers
log_event_handlers=1

# Flappings
log_flappings=1

# Snapshots
log_snapshots=1

# External commands
log_external_commands=1

# Active checks
log_active_checks=1

# Passive checks
log_passive_checks=1

# Initial states
log_initial_states=1
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Timezone
# --------------------------------------------------------------------
# If you need to set a specific timezone to your deamons, uncomment it
#use_timezone=Europe/Paris
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Arbiter daemons part, when the arbiter starts some daemons by itself
# This may happen if some hosts are defined in a realm that do not
# have all its daemons defined
# --------------------------------------------------------------------
# Daemons arguments
#daemons_arguments=
# Daemons log file
daemons_log_folder=%(logdir)s
# Default is to allocate a port number incrementally starting from the value defined here
daemons_initial_port=7800
# The arbiter is checking the running daemons every daemons_check_period seconds
daemons_check_period=5
# Graceful stop delay - over this period, the arbiter will force kill the daemons that it launched
daemons_stop_timeout=5
# Delay after daemons got started by the Arbiter
daemons_start_timeout=20
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Alignak internal metrics
# Export all alignak inner performance metrics to a statsd server.
# By default at localhost:8125 (UDP) with the alignak prefix
# Default is not enabled
# --------------------------------------------------------------------
statsd_host = localhost
statsd_port = 8125
statsd_prefix = alignak
statsd_enabled = 0
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Scheduler loop configuration
# Those parameters allow to configure the scheduler actions execution
# period.
# Each parameter is a scheduler recurrent action. On each scheduling
# loop turn, the scheduler checks if the time is come to execute
# the corresponding work.
# Each parameter defines on which loop turn count the action is to be
# executed. Considering a loop turn is 1 second, a parameter value set
# to 10 will make the corresponding action to be executed every 10
# seconds.
# --------------------------------------------------------------------
# BEWARE: changing some of those parameters may have unexpected
# effects! Do not change unless you know what you are doing ;)
# Some tips:
# tick_check_freshness, allow to change the freshness check period
# tick_update_retention, allow to change the retention save period
# --------------------------------------------------------------------
;tick_update_downtimes_and_comments=1
;tick_schedule=1
;tick_check_freshness=10
;tick_consume_results=1
;tick_get_new_actions=1
;tick_scatter_master_notifications=1
;tick_get_new_broks=1
;tick_delete_zombie_checks=1
;tick_delete_zombie_actions=1
;tick_clean_caches=1
;tick_update_retention=3600
tick_update_retention=1800
;tick_check_orphaned=60
tick_update_program_status=10
;tick_check_for_system_time_change=1
;tick_manage_internal_checks=1
;tick_clean_queues=1
; ### Note that if it set to 0, the scheduler will never try to clean its queues for oversizing
tick_clean_queues=10
;tick_update_business_values=60
;tick_reset_topology_change_flags=1
;tick_check_for_expire_acknowledge=1
;tick_send_broks_to_modules=1
;tick_get_objects_from_from_queues=1
;tick_get_latency_average_percentile=10



# We define the name of the 2 main Alignak configuration files.
# There may be 2 configuration files because tools like Centreon generate those...
[alignak-configuration]
# Alignak main configuration file
# -----
# For the unit tests, do not set any configuration file because it is often declared in the tests...
# -----
CFG=./alignak.cfg
# Alignak secondary configuration file (none as a default)
;CFG2=


# For each Alignak daemon, this file contains a section with the daemon name. The section
# identifier is the corresponding daemon name prefixed with the keyword daemon and a dot.
# This daemon name is usually built with the daemon type (eg. arbiter, poller,...) and the
# daemon name separated with a dash.
#
#Â The previous rules ensure that Alignak will be able to find all the daemons configuration
# in this file whatever the number of daemons existing in the configuration
#
# To be easily used as a configuration variable of this file, the daemon name is repeated
# inside the section in a NAME variable.
#
# Each section inherits from the [DEFAULT] section and only defines the specific values
# inherent to the declared daemon.

[daemon.arbiter-master]
type=arbiter
name=arbiter-master

#-- Network configuration
;address=127.0.0.1
port=7770

## Modules
# Default: None
## Interesting modules:
# - backend_arbiter     = get the monitored objects configuration from the Alignak backend
;modules=backend_arbiter
;modules=Example


[daemon.scheduler-master]
type=scheduler
name=scheduler-master

#-- Network configuration
;address=127.0.0.1
port=7768

## Modules
# Default: None
# Interesting modules that can be used:
# - backend_scheduler   = store the live state in the Alignak backend (retention)
;modules=backend_scheduler
;modules=Example

## Advanced Features:
# Skip initial broks creation. Boot fast, but some broker modules won't
# work with it! (like livestatus for example)
skip_initial_broks=0

# Some schedulers can manage more hosts than others
weight=1

# In NATted environments, you declare each satellite ip[:port] as seen by
# *this* scheduler (if port not set, the port declared by satellite itself
# is used)
;satellitemap=poller-1=1.2.3.4:7771, reactionner-1=1.2.3.5:7769, ...

# Does it accept passive check results for unknown hosts?
accept_passive_unknown_check_results=1

[daemon.poller-master]
type=poller
name=poller-master

#-- Network configuration
;address=127.0.0.1
port=7771

## Modules
# Default: None
## Interesting modules:
# - nrpe-booster        = Replaces the check_nrpe binary to enhance performance for NRPE checks
# - snmp-booster        = Snmp bulk polling module
;modules=nrpe-booster
;modules=Example

## Advanced parameters:
manage_sub_realms=0
min_workers=0
max_workers=0
processes_by_worker=256
worker_polling_interval=1

## Passive mode
# In active mode (default behavior), connections are poller -> scheduler to report checks results
# For DMZ monitoring, set to 1 for the connections to be from scheduler -> poller.
#passive=0

## Poller tags
# Poller tags are the tag that the poller will manage. Use None as tag name to manage
# untagged checks (default)
#poller_tags=None

[daemon.reactionner-master]
type=reactionner
name=reactionner-master

#-- Network configuration
;address=127.0.0.1
port=7769

## Modules
# Default: None
# Interesting modules that can be used:
# - nothing currently
;modules
;modules=Example

## Advanced parameters:
manage_sub_realms=0
min_workers=0
max_workers=0
processes_by_worker=256
worker_polling_interval=1

## Passive mode
# In active mode (default behavior), connections are poller -> scheduler to report checks results
# For DMZ monitoring, set to 1 for the connections to be from scheduler -> poller.
#passive=0

## Reactionner tags
# Reactionner tags are the tag that the reactionner will manage. Use None as tag name to manage
# untagged checks (default)
#reactionner_tags=None

[daemon.broker-master]
type=broker
name=broker-master

#-- Network configuration
;address=127.0.0.1
port=7772

#-- External modules watchdog --
# The broker daemon has a huge queue size.
max_queue_size=100000

## Modules
# Default: None
# Interesting modules that can be used:
# - backend_broker      = update the live state in the Alignak backend
# - logs                = collect monitoring logs and send them to a Python logger
;modules=backend_broker, logs
modules=logs

[daemon.receiver-master]
type=receiver
name=receiver-master

#-- Network configuration
;address=127.0.0.1
port=7773

## Modules
# Default: None
# Interesting modules that can be used:
# - nsca                = NSCA protocol server for collecting passive checks
# - external-commands   = read a nagios commands file to notify external commands
# - web-services        = expose Web services to get Alignak daemons state and
#                         notify external commands
;modules=nsca,external-commands,web-services
;modules=Example

## Advanced parameters:
# Does it receive for schedulers of sub-Realms or only for its realm?
manage_sub_realms=1

# Does it manage arbiters?
;manage_arbiters=1
# Does it accept passive check results for unknown hosts?
accept_passive_unknown_check_results=1

# For each Alignak module, this file contains a section with the module configuration.
# To be completed !!! Not functional currently
[module.backend_arbiter]
name=backend_arbiter
type=configuration
python_name=alignak_module_backend.arbiter

# Module log level
;log_level=INFO

# Module log level (DEBUG, INFO, WARNING, ERROR)
api_url=http://127.0.0.1:5000

# Backend authentication:
# [Method 1] Use token directly
# token                 1442583814636-bed32565-2ff7-4023-87fb-34a3ac93d34c
# [Method 2] Use username + password
username=admin
password=ipm-France2017
# On login, force a new token generation
# allowgeneratetoken    false

# Bypass the objects loading when arbiter is in verify mode
# Default, 0 (do not bypass)
#bypass_verify_mode      0

# check every x min if config in backend changed, if yes it will reload it
# Default, every 5 minutes
#verify_modification     5
verify_modification=30

# Check every x seconds if have actions in backend (acknowledge, downtimes, recheck...)
# Default, every 15 seconds
#action_check            15

# Number of processes used by the backend client to get data from backend.
# For example, if you define 4, it will be get data in 4 processes and so faster.
#client_processes        1

# If you use retention in scheduler, define it to 1 (default value).
# In case you disable it, the initial_state filled with ls_last_type from backend
retention_actived=1

[module.backend_broker]
name=backend_broker
type=livestate, action
python_name=alignak_module_backend.broker

# Module log level (DEBUG, INFO, WARNING, ERROR)
#log_level               INFO

# Backend endpoint URL
api_url=http://127.0.0.1:5000

# Backend authentication:
# [Method 1] Use token directly
# token                 1442583814636-bed32565-2ff7-4023-87fb-34a3ac93d34c
# [Method 2] Use username + password
username=admin
password=ipm-France2017
# On login, force a new token generation
# allowgeneratetoken    false

# Number of processes used by the backend client to get data from backend.
# For example, if you define 4, it will be get data in 4 processes and so faster.
#client_processes        1

# Number of seconds (minimum) between two configuration reloading
# When the broker receives its configuration from several schedulers (multi-realms)
# this will avoid reloading all the host/service/user objects several times (once for each
# received configuration)
# Default is 5 minutes
# load_protect_delay  300

[module.backend_scheduler]
name=backend_scheduler
type=retention
python_name=alignak_module_backend.scheduler

# Module log level (DEBUG, INFO, WARNING, ERROR)
#log_level               INFO

# Backend endpoint URL
api_url=http://127.0.0.1:5000

# Backend authentication:
# [Method 1] Use token directly
# token                 1442583814636-bed32565-2ff7-4023-87fb-34a3ac93d34c
# [Method 2] Use username + password
username=admin
password=ipm-France2017
# On login, force a new token generation
# allowgeneratetoken    false

# Number of processes used by the backend client to get data from backend.
# For example, if you define 4, it will be get data in 4 processes and so faster.
#client_processes        1

[module.logs]
name=logs
type=logs
python_name=alignak_module_logs

# Module log level
log_level=DEBUG

# Alignak Backend endpoint URL
# ---
;alignak_backend=http://127.0.0.1:5000

# Backend authentication:
# ---
# [Method 1 - most secure] Using a token:
# Get a user token from the backend:
# $ curl -H "Content-Type: application/json" -X POST -d '{"username":"admin","password":"admin"}' http://127.0.0.1:5000/login
# Copy the returned token here and uncomment this variable:
# token                 1489061891524-fe945d09-a0dd-4174-b665-6ca1306539cd

# [Method 2] Use login (username/password)
# Set your backend username and password here and uncomment those variables
;username=admin
;password=ipm-France2017

# On login, force a new token generation
# allowgeneratetoken    false

# Alignak backend polling period
# Periodically check that the Alignak backend connection is available
#alignak_backend_polling_period 60


# Logger configuration file
# ---
# You should define the logger JSON configuration file here or, even better, declare an
# environment variable 'ALIGNAK_MONITORING_LOGS_CFG' to specify the full path of the
# logger configuration file.
# The environment variable will be used in priority to any other configuration in this file
logger_configuration=/usr/local/etc/alignak/arbiter/modules/mod-logs-logger.json
#
# The 'monitoring_logs' handler in the configuration file will be used for the monitoring
# logs. Define the file name and the file rotation variables to make it suit your needs.
# The monitoring-logs logger will use this handler.
#
# The root logger is configured for the module logs and you can also adapt its configuration

# Default parameters
# ---
# If the logger configuration file is not configured or it does not exist the logger is
# configured with the following default parameters
# Logger name
#log_logger_name         monitoring-logs

# Logger file
log_dir=/tmp/
#log_file                monitoring-logs.log

# Logger file rotation parameters
#log_rotation_when       midnight
#log_rotation_interval   1
#log_rotation_count      365

# Logger level (accepted log level values=INFO,WARNING,ERROR)
#log_level               INFO

# Logger log format
#log_format              [%(created)i] %(levelname)s: %(message)s

# Logger date is ISO8601 with timezone
#log_date                %Y-%m-%d %H:%M:%S %Z


[module.web-services]
name=web-services
type=web-services
python_name=alignak_module_ws

# Module log level (DEBUG, INFO, WARNING, ERROR)
#log_level               INFO

# ---------------
# Alignak Backend endpoint URL
# ---------------
#alignak_backend         http://127.0.0.1:5000

# Backend authentication:
# ---
# [Method 1 - most secure] Using a token:
# Get a user token from the backend:
# $ curl -H "Content-Type: application/json" -X POST -d '{"username":"admin","password":"admin"}' http://127.0.0.1:5000/login
# Copy the returned token here and uncomment this variable:
#token                 1489061891524-fe945d09-a0dd-4174-b665-6ca1306539cd

# [Method 2] Use login (username/password)
# Set your backend username and password here and uncomment those variables
username=admin
password=ipm-France2017

# On login, force a new token generation
#allowgeneratetoken    false

# Alignak backend polling period
# Periodically check that the Alignak backend connection is available
# Use 0 to disable the Alignak backend background polling
#alignak_backend_polling_period 60


# ---------------
# Alignak Backend objects
# ---------------
# Set this variable to 1 to allow the host creation by the WS
# Default is to allow host creation
allow_host_creation=1
#ignore_unknown_host     0
# Set this variable to 1 to allow the service creation by the WS
# Default is to not allow service creation (services are created through hosts templates)
allow_service_creation=1
# Do not raise an error status for unknown service if service creation is not active
#ignore_unknown_service  1

# ---------------
# Alignak arbiter configuration
# ---------------
# Alignak main arbiter interface
#Â Set alignak_host as empty to disable the Alignak arbiter polling
# The default is to poll a local Alignak arbiter to check it is alive
#alignak_host            127.0.0.1
#alignak_port            7770

# Alignak polling period
# Periodically (every 5 seconds) check that the Alignak arbiter is alive
alignak_polling_period=15

# Alignak daemons status refresh period
# Periodically get the Alignak daemons status
#alignak_daemons_polling_period      10


# ---------------
# Set timestamp for the external commands if not set
# If no timestamp is set in the external commands, Alignak will set its own timestamp
set_timestamp=1
# ---------------

# ---------------
# Give result
# Return some information about the commands executed in the _result property
# Default is no result to avoid verbose information
# 0: no result
# 1: send result
#give_result               0
# ---------------

# ---------------
# Give feedback when updating the livestate
# Return some information about the host/service updated
# Default is only host feedback because services feedback is verbose ;)
# 0: no feedback
# 1: feedback only for host
# 2: feedback for host and services
#give_feedback             0
# List of the host/service properties to include in the feedback
# Note that name is always present
#feedback_host
# Some interesting properties for an host and its services:
#feedback_host alias,notes,location,active_checks_enabled,max_check_attempts,check_interval,retry_interval,passive_checks_enabled,check_freshness,freshness_state,freshness_threshold,_overall_state_id
feedback_host=active_checks_enabled,check_interval,retry_interval,passive_checks_enabled,freshness_threshold
#feedback_service alias,notes,active_checks_enabled,max_check_attempts,check_interval,retry_interval,passive_checks_enabled,check_freshness,freshness_state,freshness_threshold,_overall_state_id
# ---------------

# ---------------
# Direct update of the host/service livestate in the Alignak backend
# This should not be necessary anymore when the backend broker module will get updated
# You can set this option if no backend broker module is installed on your Alignak for the
# WS module to update the backend livestate
#alignak_backend_livestate_update   0

# ---------------
# Send log check result to the backend for old received metrics (defaults to yes)
# deprecated - timeshift is the delay to consider that a received livestate is in the past
# if the received livestate is older than alignak_backend_timeshift seconds, no external
#Â command will not be sent to the scheduler and the check result will not be sent to the backend
# if alignak_backend_get_lcr is 1 then the older log check result will be fetched from the
# backend to update the posted log check result
#alignak_backend_old_lcr     1
alignak_backend_timeshift=5
#alignak_backend_get_lcr     0

# ---------------
# Interface configuration
# ---------------
# Interface the modules listens to
host=0.0.0.0
# Do not comment the port parameter (see Alignak #504)
port=8008

# Internal server log files
# Default is no log - only activate this for test and debug purpose ;)
# log_access    /tmp/alignak-module-ws-access.log
# log_error     /tmp/alignak-module-ws-error.log

# HTTP authorization
# Setting this variable to 0 will disable the HTTP authorization check;
# it is not the recommended configuration :)
# As a default, authorization is enabled on all the WS endpoints
#authorization           1

# SSL configuration
use_ssl=0
#ca_cert                 /usr/local/etc/alignak/certs/ca.pem
#server_cert             /usr/local/etc/alignak/certs/server.crt
#server_key              /usr/local/etc/alignak/certs/server.key
#server_dh               /usr/local/etc/alignak/certs/server.pem
#hard_ssl_name_check     0


# Export module metrics to a statsd server.
# By default at localhost:8125 (UDP) with the alignak prefix
# Use the same prefix as the one defined in alignak (if any...)
# Stats will be available in statsd_prefix.name
#statsd_host    localhost
#statsd_port    8125
#statsd_prefix  alignak.modules
# Default is not enabled
#statsd_enabled 0
