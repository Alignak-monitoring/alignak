# For each Alignak daemon, this file contains a section with the daemon name. The section
# identifier is the corresponding daemon name prefixed with the keyword daemon and a dot.
# This daemon name is usually built with the daemon type (eg. arbiter, poller,...) and the
# daemon name separated with a dash.
#
# The previous rules ensure that Alignak will be able to find all the daemons configuration
# in this file whatever the number of daemons is existing in the configuration
#
# To be easily used as a configuration variable of this file, the daemon name is repeated
# inside the section in a NAME variable.
#
# Each section inherits from the [DEFAULT] section and only defines the specific values
# inherent to the declared daemon.

[daemon.arbiter-master]
type=arbiter
name=arbiter-master

; Network configuration
; ---
; My listening interface
;host=0.0.0.0
port=7770
; My adress for the other daemons
;address=127.0.0.1

; Modules
; ---
; Default: None
; Interesting modules:
; - backend_arbiter: get the monitored objects configuration from the Alignak backend
;modules=backend_arbiter


[daemon.scheduler-master]
type=scheduler
name=scheduler-master

; Network configuration
; ---
; My listening interface
;host=0.0.0.0
port=7768
; My adress for the other daemons
;address=127.0.0.1

; Modules
; ---
; Default: None
; Interesting modules:
; - backend_scheduler: store the system live state in the Alignak backend (retention)
;modules=backend_scheduler

; Advanced Features:
; If set, the scheduler will skip initial broks creation. It will be a little faster to start-up
; but no broker module will receive the initial_status broks. Take care about this!
;skip_initial_broks=0

; Some schedulers can manage more hosts than others
; The scheduler weight indicates if the scheduler can manage more hosts than its siblings...
;weight=1

[daemon.poller-master]
type=poller
name=poller-master

; Network configuration
; ---
; My listening interface
;host=0.0.0.0
port=7771
; My adress for the other daemons
;address=127.0.0.1

; Modules
; ---
; Default: None
; Interesting modules:
; - nrpe-booster, replaces the check_nrpe binary to enhance performance for NRPE checks
; - snmp-booster, replace the snmp_get with a bulk polling module
;modules=nrpe-booster

; Advanced parameters:
;manage_sub_realms=1
; If set to 0 the min_workers and max_workers values will be configured according to the
; system CPU count, This will lead to use as many workers as CPUs count less one; one CPU
; is preserved to avoid too much load on the system and let the other daemons do thei job;)
; If you set min_workers and max_workers to the same value, you will set the workers count.
; Use as much worker as possible for the pollers
min_workers=0
max_workers=0
;processes_by_worker=256
;worker_polling_interval=1

; Passive mode
; In active mode (default behavior), connections between scheduler and poller are
; poller -> scheduler to get checks to launch
; poller -> scheduler to report checks results
; For DMZ monitoring, set the passive mode for the connections to be from scheduler -> poller.
;passive=0

; Poller tags
; Poller tags are the tag that the poller will manage.
; Use None as tag name to manage untagged checks (default)
;poller_tags=None

[daemon.reactionner-master]
type=reactionner
name=reactionner-master

; Network configuration
; ---
; My listening interface
;host=0.0.0.0
port=7769
; My adress for the other daemons
;address=127.0.0.1

; Modules
; ---
; Default: None
; Interesting modules:
; - none currently
;modules

; Advanced parameters:
;manage_sub_realms=1
; If set to 0 the min_workers and max_workers values will be configured with the system CPU count
; this to use as many workers as CPUs
; If you set min_workers and max_workers to the same value, you will set the workers count.
; Use only 1 worker for the reactionner
min_workers=1
max_workers=1
;processes_by_worker=256
;worker_polling_interval=1

; Passive mode
; In active mode (default behavior), connections between scheduler and reactionner are
; reactionner -> scheduler to get checks to launch
; reactionner -> scheduler to report checks results
; For DMZ monitoring, set the passive mode for the connections to be from scheduler -> reactionner.
;passive=0

; Reactionner tags
; Reactionner tags are the tag that the reactionner will manage.
; Use None as tag name to manage untagged actions (default)
;reactionner_tags=None

[daemon.broker-master]
type=broker
name=broker-master

; Network configuration
; ---
; My listening interface
;host=0.0.0.0
port=7772
; My adress for the other daemons
;address=127.0.0.1

; Advanced parameters:
;manage_sub_realms=1
; The broker daemon may have an important message queue size so it is important to alert
; if this queue size becomes too huge; it may be caused by a broker module problem!
max_queue_size=100000

; Gets the arbiter broks
; There must only be one and only one broker that gets the broks created by the arbiter
; Do not set this parameter for all other brokers because it defaults to False.
manage_arbiters=1

; Modules
; ---
; Default: None
; Interesting modules:
; - backend_broker, update the live state in the Alignak backend
; - logs, collect monitoring logs and send them to the Alignak backend
;modules=backend_broker, logs

[daemon.receiver-master]
type=receiver
name=receiver-master

; Network configuration
; ---
; My listening interface
;host=0.0.0.0
port=7773
; My adress for the other daemons
;address=127.0.0.1

; Modules
; ---
; Default: None
; Interesting modules:
; - nsca, NSCA protocol server for collecting passive checks
; - external-commands, read a nagios commands file to notify external commands
; - web-services, expose Web services to get Alignak daemons state and notify external commands
;modules=nsca,external-commands,web-services

; Advanced parameters:
;manage_sub_realms=1

; Gets the arbiter external commands
; There must only be one and only one receiver that gets the external comands collected by the
; arbiter
; Do not set this parameter for all other receivers because it defaults to False.
; Unset this parameter to disable the arbiter external commands
manage_arbiters=1
